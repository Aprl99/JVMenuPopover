{
  "name": "JVMenuPopover",
  "tagline": "Simple popover menu in Objective-C",
  "body": "# JVMenuPopover [![Version](https://img.shields.io/cocoapods/v/JVMenuPopover.svg?style=flat)](http://cocoadocs.org/docsets/JVMenuPopover) [![License](https://img.shields.io/cocoapods/l/JVMenuPopover.svg?style=flat)](http://cocoadocs.org/docsets/JVMenuPopover) [![Platform](https://img.shields.io/cocoapods/p/JVMenuPopover.svg?style=flat)](http://cocoadocs.org/docsets/JVMenuPopover)\r\n\r\nThis is a simple menu controller where I tried to simulate the native iOS animation of switching between apps. It can be used in many different ways and you can also customize it to use your own animations.\r\n\r\n## Previews\r\n\r\n#### • Menu with slideInWithBounceAnimation\r\n\r\n<a href=\"http://www.youtube.com/watch?feature=player_embedded&v=ySgPzJJSCAg?autoplay=1\" target=\"_blank\">![screenshot-1](Previews/jvmenu.preview1.gif)</a>\r\n\r\n#### • Menu with slideInAnimation\r\n\r\n<a href=\"http://www.youtube.com/watch?feature=player_embedded&v=2MG6kVMMuTo?autoplay=1\" target=\"_blank\">![screenshot-1](Previews/jvmenu.preview2.gif)</a>\r\n\r\n## Requirements\r\n\r\nDeveloped and tested using iOS8+\r\n\r\n## Installation\r\n\r\nJVMenuPopover is available through [CocoaPods](http://cocoapods.org). To install\r\nit, simply add the following line to your Podfile:\r\n\r\n```\r\npod \"JVMenuPopover\"\r\n```\r\n\r\n## Usage\r\n\r\nTo run the example project, clone the repo, and run `pod install` from the Example directory first.\r\n\r\nUsing JVMenuPopover with your own project.\r\n\r\n* In your function `application: didFinishLaunchingWithOptions:` we need to setup our `UIWindow`, `JVMenuNavigationController` and your root view controller. Feel free to follow my project sample implementation where I use lazy intialization for these objects. \r\n    \r\n    * Also, it's important to set a background image to our `UIWindow` to be able to achieve the our menu effect with a background image.\r\n    \r\n```objc \r\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\r\n{\r\n    // setting up app window\r\n    [self setupCustomWindow];\r\n\r\n    return YES;\r\n}\r\n\r\n#pragma mark - Custom Accessors\r\n\r\n- (JVMenuRootViewController *)rootViewController\r\n{\r\n    if (!_rootViewController)\r\n    {\r\n        _rootViewController = [[JVMenuRootViewController alloc] init];\r\n    }\r\n\r\n    return _rootViewController;\r\n}\r\n\r\n\r\n- (JVMenuNavigationController *)navigationController\r\n{\r\n    if (!_navigationController)\r\n    {\r\n        _navigationController = [[JVMenuNavigationController alloc] initWithRootViewController:self.rootViewController transparentNavBar:YES];\r\n    }\r\n\r\n    return _navigationController;\r\n}\r\n\r\n\r\n#pragma mark - UIWindow Customization\r\n\r\n- (void)setupCustomWindow\r\n{\r\n    self.window = [[UIWindow alloc] init];\r\n    self.window.rootViewController = self.navigationController;\r\n    self.window.backgroundColor = [UIColor colorWithPatternImage:[[UIImage imageNamed:@\"app_bg1.jpg\"] imageScaledToWidth:self.window.frame.size.width]];\r\n\r\n    [self.window makeKeyAndVisible];\r\n    [self.window addSubview:self.navigationController.view];\r\n}\r\n```\r\n\r\n* Then, in your rootController we need to set our data model for our menu using the class `JVMenuItems` which holds all the menu images, titles and the close button image to display. Also, we can set our preferred menu animation. And we need to create the `JVMenuPopoverView` which is the actual menu with the menu items. Note: The same approach here the use of lazy intialization.\r\n\r\n```objc\r\n- (JVMenuItems *)menuItems\r\n{\r\n    if(!_menuItems)\r\n    {\r\n        _menuItems = [[JVMenuItems alloc] initWithMenuImages:@[[UIImage imageNamed:@\"home-48\"],\r\n                                                               [UIImage imageNamed:@\"about-48\"],\r\n                                                               [UIImage imageNamed:@\"settings-48\"],\r\n                                                               [UIImage imageNamed:@\"business_contact-48\"],\r\n                                                               [UIImage imageNamed:@\"ask_question-48\"]]\r\n                                                  menuTitles:@[@\"Home\",\r\n                                                               @\"About Us\",\r\n                                                               @\"Our Service\",\r\n                                                               @\"Contact Us\",\r\n                                                               @\"Help?\"]\r\n                                         menuCloseButtonImage:[UIImage imageNamed:@\"cancel_filled-50\"]];\r\n        _menuItems.menuSlideInAnimation = YES; \r\n    }\r\n\r\n    return _menuItems;\r\n}\r\n\r\n- (JVMenuPopoverView *)menuPopover\r\n{\r\n    if(!_menuPopover)\r\n    {\r\n        _menuPopover = [[JVMenuPopoverView alloc] initWithFrame:self.view.frame menuItems:self.menuItems];\r\n        _menuPopover.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.5];\r\n        _menuPopover.delegate = self;\r\n    }\r\n\r\n    return _menuPopover;\r\n}\r\n```\r\n\r\n\r\n* Then, we need to set our menu bar button with our preferred image and set the target to show the menu.\r\n\r\n```objc\r\n- (void)viewDidLoad\r\n{\r\n    [super viewDidLoad];\r\n\r\n    // creating menu\r\n    self.menuPopover = [self menuPopover];\r\n\r\n    // setting up menu bar button\r\n    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:@\"menu_black-48\"] style:UIBarButtonItemStylePlain target:self action:@selector(showMenu)];\r\n    self.navigationItem.leftBarButtonItem.tintColor = [UIColor blackColor];\r\n}\r\n```\r\n\r\n* Finally, we set our menu bar button to target to call the `JVMenuPopoverView` helper function and our menu delegate to know which menu item was selected by the user and present a new view controller or whatever you would like to then. **Note:** after iOS 9, we can't no longer present self on our rootController so, you might need to either have a property for the rootController and use that instead.  \r\n\r\n```objc\r\n#pragma mark - Menu Helper Functions\r\n\r\n- (void)showMenu\r\n{\r\n    [self.menuPopover showMenuWithController:self];\r\n}\r\n\r\n\r\n#pragma mark - Menu Delegate\r\n\r\n- (void)menuPopoverDidSelectViewControllerAtIndexPath:(NSIndexPath *)indexPath\r\n{\r\n    if(indexPath.row == 0)\r\n    {\r\n        [self.navigationController setViewControllers:@[self.rootController]; // this is a temporary fix for the issue on iOS 9 not able to set 'self' as the current view controller\r\n    }\r\n    else if(indexPath.row == 1)\r\n    {\r\n        [self.navigationController setViewControllers:@[self.secondController]];\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Author & Support\r\n\r\nContact me if you find any bugs or potential room for improvements, which I am sure there are. Jorge Valbuena (@JV17), jorge.valbuena@jorgedeveloper.com. BTW! You are welcome to help in supporting this pod or making improvements to it.\r\n\r\n## License\r\n\r\nJVMenuPopover is available under the MIT license. See the LICENSE file for more info.\r\n\r\n## Release Notes\r\n\r\n#### Version 1.4\r\n\r\n* Improved landscape support. Now the menu closes prior rotation to avoid image size issues.\r\n* Added new delegates to Menu view to know when the menu view will show or hide.\r\n* Added new property to the Menu view which indicates if the view hidden or not.\r\n* Added optional functions on the rootController which hides & shows the navigationItem button (menu button), please sample project for this.\r\n\r\n\r\n#### Version 1.3\r\n\r\n* Added landscape support. Please be advise that you might need to provide a bigger image allow the background to show properly.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}